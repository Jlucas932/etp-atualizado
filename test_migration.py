#!/usr/bin/env python3
"""
Teste do sistema de migra√ß√µes para as tabelas do Knowledge Base
Este script testa se o changeset 011 √© aplicado corretamente
"""

import os
import sys
from dotenv import load_dotenv

# Adicionar src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src', 'main', 'python'))

def test_migration():
    """Testa o sistema de migra√ß√£o"""
    
    print("üß™ Iniciando teste do sistema de migra√ß√µes...")
    
    # Configurar vari√°veis de ambiente para teste
    os.environ['DB_VENDOR'] = 'postgresql'
    os.environ['DB_URL'] = 'postgresql://test:test@localhost:5432/test_autodoc_ia'
    os.environ['EXECUTE_LIQUIBASE'] = 'true'
    os.environ['OPENAI_API_KEY'] = 'test-key-for-migration-test'
    os.environ['SECRET_KEY'] = 'test-secret-key'
    
    try:
        # Importar e testar configura√ß√£o de migra√ß√µes
        from application.config.ds_migration import configurar_migracoes, verificar_status_migracao, listar_tabelas_disponiveis
        
        print("üìã Verificando status inicial...")
        status = verificar_status_migracao()
        print(f"   DB Vendor: {status['db_vendor']}")
        print(f"   Execute Liquibase: {status['execute_liquibase']}")
        print(f"   Migration Status: {status['migration_status']}")
        
        print("\nüîß Executando configura√ß√£o de migra√ß√µes...")
        configurar_migracoes()
        
        print("\nüìä Verificando status p√≥s-migra√ß√£o...")
        status = verificar_status_migracao()
        print(f"   Migration Status: {status['migration_status']}")
        
        if 'tables_exist' in status:
            for table, exists in status['tables_exist'].items():
                print(f"   Tabela {table}: {'‚úÖ Existe' if exists else '‚ùå N√£o existe'}")
        
        print("\nüìù Listando tabelas dispon√≠veis...")
        tabelas = listar_tabelas_disponiveis()
        kb_tables = ['kb_document', 'kb_chunk', 'legal_norm_cache']
        
        for table in kb_tables:
            if table in tabelas:
                print(f"   ‚úÖ {table}")
            else:
                print(f"   ‚ùå {table} (n√£o encontrada)")
        
        # Teste do crit√©rio de aceite: select count(*) from kb_chunk
        print("\nüéØ Testando crit√©rio de aceite: SELECT COUNT(*) FROM kb_chunk...")
        
        from domain.interfaces.dataprovider.DatabaseConfig import db
        from application.config.FlaskConfig import create_api
        
        app = create_api()
        with app.app_context():
            try:
                from sqlalchemy import text
                result = db.session.execute(text('SELECT COUNT(*) FROM kb_chunk')).fetchone()
                count = result[0] if result else 0
                print(f"   ‚úÖ SELECT COUNT(*) FROM kb_chunk = {count}")
                print("   ‚úÖ Crit√©rio de aceite atendido!")
            except Exception as e:
                print(f"   ‚ùå Erro no SELECT COUNT(*): {e}")
                return False
        
        print("\nüéâ Teste de migra√ß√£o conclu√≠do com sucesso!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o (hal_pyliquibase n√£o dispon√≠vel): {e}")
        print("   AVISO: Para executar migra√ß√µes Liquibase, instale: pip install hal_pyliquibase")
        return False
    except Exception as e:
        print(f"‚ùå Erro no teste de migra√ß√£o: {e}")
        return False

def test_sqlite_fallback():
    """Testa o fallback para SQLite"""
    
    print("\nüß™ Testando fallback SQLite...")
    
    # Configurar para SQLite
    os.environ['DB_VENDOR'] = 'sqlite'
    os.environ['DB_URL'] = 'sqlite:///database/app.db'
    
    try:
        from application.config.ds_migration import configurar_migracoes
        from application.config.FlaskConfig import create_api
        from domain.interfaces.dataprovider.DatabaseConfig import db
        
        app = create_api()
        with app.app_context():
            # Verificar se as tabelas KB existem
            try:
                from sqlalchemy import text
                result = db.session.execute(text('SELECT COUNT(*) FROM kb_chunk')).fetchone()
                count = result[0] if result else 0
                print(f"   ‚úÖ SQLite - SELECT COUNT(*) FROM kb_chunk = {count}")
                return True
            except Exception as e:
                print(f"   ‚ùå Erro no SQLite test: {e}")
                return False
                
    except Exception as e:
        print(f"‚ùå Erro no teste SQLite: {e}")
        return False

if __name__ == '__main__':
    # Load environment variables
    load_dotenv()
    
    print("=" * 60)
    print("TESTE DO SISTEMA DE MIGRA√á√ïES - AUTODOC IA")
    print("=" * 60)
    
    # Teste 1: Migra√ß√£o PostgreSQL (se dispon√≠vel)
    postgresql_success = test_migration()
    
    # Teste 2: Fallback SQLite
    sqlite_success = test_sqlite_fallback()
    
    print("\n" + "=" * 60)
    print("RESUMO DOS TESTES")
    print("=" * 60)
    print(f"PostgreSQL + Liquibase: {'‚úÖ OK' if postgresql_success else '‚ùå FALHA'}")
    print(f"SQLite Fallback:        {'‚úÖ OK' if sqlite_success else '‚ùå FALHA'}")
    
    if sqlite_success:
        print("\n‚úÖ SISTEMA DE MIGRA√á√ïES FUNCIONANDO!")
        print("   O changeset 011 foi implementado com sucesso.")
        print("   As tabelas kb_document, kb_chunk e legal_norm_cache est√£o dispon√≠veis.")
    else:
        print("\n‚ùå PROBLEMAS NO SISTEMA DE MIGRA√á√ïES")
        sys.exit(1)